// npm init
// npm install prompt-sync
// npm install body-parser
// npm install express
// npm install mongoose
// npm install -g nodemon --> installed globally
// install MongoDb Compass


/*
    npm init -y: create package.json --> setting up a new Node.js
    npm install prompt-sync: for install prompt

    body-parser: is a middleware used in Express to read and parse incoming request data
    
    mongoose: promise-based object data modeling (ODM) library for the Node.js framework,
        and it is modole in npm has a lot of functionality to intercat with DB (NoSQL)

    What is The Deffrente Between MongoDb Compass & MongoDb Atlas & Nodemon

        - MongoDB Compass: is a graphical user interface (GUI) has a lot of features 
            like databases visually, store data in collection

        - MongoDB Atlas:  is a fully managed cloud database service that enables
             users to easily deploy, manage, and scale MongoDB databases.

        - The cloud is like using a service or storing data online instead
            of on your own computer. You can access it from anywhere with the internet.
        
        - Note: the data store in DB as BSON format (like JSON format)
    
        - Nodemon is a utility tool for Node.js applications that automatically restarts the server
            whenever there are changes to the source code
*/

// Inside the Database
/*
    - A collection is a group of documents (like JSON objects).
    - A schema defines the structure of those documents. (filieds, types, ...)
    - A model is a tool in Mongoose that uses the schema to interact with the collection.
*/


// Life Cycle Transfer the Data to DB:
/*
    To store user data in MongoDB you need to:
        - Create a server to handle requests. --> use Express
        - Send requests to the server. --> server send data to DB
        - The server will then store the data in MongoDB. --> You can use MongoDB Compass to view and manage the data

    In Details:
        define Routes (POST, GET, PUT, PATCH) --> with server
        Use PostMan to send request Database:
            "http://localhost:3000/post"
            "http://localhost:3000/get"
            "http://localhost:3000/put"
            "http://localhost:3000/patch"
        Run the App and make server listen to post 3000
*/

// Deal With DB
/*
    To CRUD from DB:
        POST /api/tasks : add Data to DB
        GET /api/tasks : Get the Data from DB
        PUT /api/tasks/:id : Update Date in DB 
        DELETE /api/tasks/:id: Delete from DB
*/









https://medium.com/@tomorchandraroy884/how-to-connect-mongodb-with-node-js-using-mongoose-a0c772dfb1ca



